<div class="max-w-6xl mx-auto px-4 py-12" x-data="addressManager()" x-cloak>
  <div class="flex flex-col md:flex-row items-center justify-between my-5 gap-4">
    <h1 class="text-2xl font-bold text-gray-700">Addresses</h1>
    <button @click="newAddress = true" type="button" class="text-white font-medium bg-gray-700 hover:bg-gray-900 px-6 py-2">Create new address</button>
    <a href="{{ routes.account_url }}" class="text-blue-600 hover:text-blue-800 font-medium underline">Back to account</a>
  </div>

  <!-- Create new address modal -->
  <div x-show="newAddress" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto z-50 flex items-start justify-center pt-20" style="display:none;">
    <div class="relative max-w-md w-full bg-white border p-4 rounded">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-lg font-medium">New address</h2>
        <button @click="newAddress = false" class="text-gray-500" aria-label="Close">
          {% render 'icon-close' %}
        </button>
      </div>

      {% form 'customer_address', customer.new_address %}
        <template x-for="(field, index) in newAddressFields" :key="index">
          <div class="mb-4" x-show="field.visible !== false">
            <label :for="field.id" class="uppercase text-gray-700 text-xs font-medium mb-2" x-text="field.label"></label>
            <template x-if="field.type === 'select'">
              <select 
                :id="field.id" 
                :name="field.name" 
                class="w-full text-gray-700 border px-4 py-3 focus:outline-none"
                x-model="field.value"
                @change="field.name === 'address[country]' ? updateProvinces(field.value) : null"
                data-country-selector
                :data-id="field.formId"
              >
                <option 
                  x-for="option in field.options" 
                  :value="option.value" 
                  :selected="option.value === field.value"
                  x-text="option.text"
                  :data-provinces="option.provinces || null"
                ></option>
              </select>
            </template>
            <template x-if="field.type === 'text' || field.type === 'tel' || field.type === 'password'">
              <input 
                :type="field.type" 
                :id="field.id" 
                :name="field.name" 
                class="w-full text-gray-700 border px-4 py-3 focus:outline-none"
                x-model="field.value"
              />
            </template>
          </div>
        </template>

        <div class="mb-4 flex items-center space-x-2">
          <input type="checkbox" id="set_default_{{ form.id }}" name="address[default]" class="h-4 w-4 text-gray-600" x-model="setDefault">
          <label for="set_default_{{ form.id }}" class="uppercase text-gray-700 text-xs font-medium mb-0 cursor-pointer">Set as default address</label>
        </div>

        <div class="flex flex-row gap-2">
          <button type="submit" class="w-full font-medium text-white bg-gray-700 hover:bg-gray-900 px-4 py-2">Create address</button>
          <button type="button" @click="newAddress = false" class="w-full font-medium text-gray-700 border border-gray-700 px-4 py-2">Cancel</button>
        </div>
      {% endform %}
    </div>
  </div>

  <!-- Existing addresses -->
  <div>
    {% paginate customer.addresses by 10 %}
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-12 p-4 md:p-12">
        {% for address in customer.addresses %}
          <div x-data="{ editAddress: false }" class="relative flex flex-col text-center border p-2 rounded shadow-sm">
            {% if address == customer.default_address %}
              <span class="absolute top-2 left-2 text-xs font-medium text-white bg-green-700 px-4 py-2 rounded-full">Default</span>
            {% endif %}

            <div class="my-8 h-full whitespace-pre-line">
              {{ address | format_address }}
            </div>

            <div class="flex flex-row gap-2">
              <button @click="editAddress = true" class="w-full text-xs text-white bg-gray-700 hover:bg-gray-900 font-medium py-2 rounded">Edit</button>
              <button 
                class="w-full text-xs font-medium text-gray-700 border py-2 rounded"
                @click.prevent="if(confirm('Do you really wish to delete this address?')) $refs[`deleteForm_{{ address.id }}`].submit()"
              >Delete</button>
            </div>

            <form method="post" action="{{ address.url }}" x-ref="deleteForm_{{ address.id }}">
              <input type="hidden" name="_method" value="delete" />
            </form>

            <!-- Edit address modal -->
            <div x-show="editAddress" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto z-50 flex items-start justify-center pt-20" style="display:none;">
              <div class="relative max-w-md w-full bg-white border p-4 rounded">
                <div class="flex items-center justify-between mb-4">
                  <h2 class="text-lg font-medium">Edit address</h2>
                  <button @click="editAddress = false" class="text-gray-500" aria-label="Close">{% render 'icon-close' %}</button>
                </div>

                {% form 'customer_address', address %}
                  <template x-for="(field, index) in editAddressFields" :key="index">
                    <div class="mb-4" x-show="field.visible !== false">
                      <label :for="field.id" class="uppercase text-gray-700 text-xs font-medium mb-2" x-text="field.label"></label>
                      <template x-if="field.type === 'select'">
                        <select 
                          :id="field.id" 
                          :name="field.name" 
                          class="w-full text-gray-700 border px-4 py-3 focus:outline-none"
                          x-model="field.value"
                          @change="field.name === 'address[country]' ? updateProvinces(field.value, 'edit') : null"
                          data-country-selector
                          :data-id="field.formId"
                        >
                          <option 
                            x-for="option in field.options" 
                            :value="option.value" 
                            :selected="option.value === field.value"
                            x-text="option.text"
                            :data-provinces="option.provinces || null"
                          ></option>
                        </select>
                      </template>
                      <template x-if="field.type === 'text' || field.type === 'tel' || field.type === 'password'">
                        <input 
                          :type="field.type" 
                          :id="field.id" 
                          :name="field.name" 
                          class="w-full text-gray-700 border px-4 py-3 focus:outline-none"
                          x-model="field.value"
                        />
                      </template>
                    </div>
                  </template>

                  <div class="mb-4 flex items-center space-x-2">
                    <input type="checkbox" :id="'set_default_' + formIdEdit" name="address[default]" class="h-4 w-4 text-gray-600" x-model="setDefaultEdit">
                    <label :for="'set_default_' + formIdEdit" class="uppercase text-gray-700 text-xs font-medium mb-0 cursor-pointer">Set as default address</label>
                  </div>

                  <div class="flex flex-row gap-2">
                    <button type="submit" class="w-full font-medium text-white bg-gray-700 hover:bg-gray-900 px-4 py-2">Edit address</button>
                    <button type="button" @click="editAddress = false" class="w-full font-medium text-gray-700 border border-gray-700 px-4 py-2">Cancel</button>
                  </div>
                {% endform %}
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    {% endpaginate %}
  </div>
</div>

<script>
  function addressManager() {
    return {
      newAddress: false,
      setDefault: false,
      setDefaultEdit: false,
      newAddressFields: [],
      editAddressFields: [],
      formIdEdit: null,

      init() {
        // Ініціалізуємо поля нової адреси з data із форми (або можна тут вручну)
        this.initNewAddressFields();
        this.initEditAddressFields();
      },

      initNewAddressFields() {
        // Заповнюємо поля нової адреси, підтягуємо дані із DOM (за необхідності)
        const form = document.querySelector('form[action$="customer_address"]'); // нова адреса
        if (!form) return;

        this.newAddressFields = this.getFormFields(form, 'new');
      },

      initEditAddressFields() {
        // Під час відкриття модального вікна редагування – ініціалізувати поля в Alpine (треба допрацювати при реальній інтеграції)
      },

      getFormFields(form, type) {
        const fields = [];

        form.querySelectorAll('input, select').forEach(el => {
          if (!el.name) return;

          fields.push({
            id: el.id,
            name: el.name,
            type: el.tagName.toLowerCase() === 'select' ? 'select' : el.type,
            value: el.value,
            label: this.getLabelText(form, el.id),
            formId: form.id || type,
            options: el.tagName.toLowerCase() === 'select' 
              ? Array.from(el.options).map(opt => ({
                value: opt.value,
                text: opt.textContent,
                provinces: opt.dataset.provinces || null
              })) 
              : []
          });
        });

        return fields;
      },

      getLabelText(form, id) {
        const label = form.querySelector(`label[for="${id}"]`);
        return label ? label.textContent.trim() : '';
      },

      updateProvinces(selectedCountry, mode = 'new') {
        const countrySelect = mode === 'new' 
          ? document.querySelector('select[data-country-selector]')
          : document.querySelector(`div[x-show][style*="display: block"] select[data-country-selector]`);

        if (!countrySelect) return;

        // Знаходимо option із відповідним value
        const option = Array.from(countrySelect.options).find(o => o.value === selectedCountry);
        if (!option) return;

        const provincesData = option.dataset.provinces;
        let provinces = [];
        try {
          provinces = provincesData ? JSON.parse(provincesData) : [];
        } catch {
          provinces = [];
        }

        let provinceSelect;
        if (mode === 'new') {
          provinceSelect = document.querySelector('#address_province_new');
        } else {
          provinceSelect = document.querySelector(`#address_province_${this.formIdEdit}`);
        }

        if (!provinceSelect) return;

        provinceSelect.innerHTML = '';

        if (provinces.length === 0) {
          provinceSelect.setAttribute('disabled', 'disabled');
        } else {
          provinceSelect.removeAttribute('disabled');
          provinces.forEach(prov => {
            const option = document.createElement('option');
            option.value = prov[0];
            option.textContent = prov[0];
            provinceSelect.appendChild(option);
          });
        }
      }
    }
  }

  document.addEventListener('alpine:init', () => {
    Alpine.data('addressManager', addressManager);
  });
</script>
